"""
Django settings for safecall project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Import dependencies conditionally
try:
    import dj_database_url
    DATABASE_URL_AVAILABLE = True
except ImportError:
    DATABASE_URL_AVAILABLE = False

try:
    from dotenv import load_dotenv
    # Load environment variables from .env file
    load_dotenv()
except ImportError:
    # If dotenv is not available, continue without it
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-dev')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Updated ALLOWED_HOSTS to include all Render domains
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# For Render deployment, ensure we include all possible domains
if not DEBUG:
    render_external_hostname = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
    if render_external_hostname:
        ALLOWED_HOSTS.append(render_external_hostname)
    # Add all possible Render domains
    ALLOWED_HOSTS.extend([
        '.onrender.com',
        'safecall.onrender.com',
        '*.onrender.com',
    ])

# Security settings for production
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
SECURE_SSL_REDIRECT = not DEBUG
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'custom_admin',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.NoCacheMiddleware',
]

ROOT_URLCONF = 'safecall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'core' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'safecall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database configuration
# Default to SQLite for development and initial deployment
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Debug information for deployment troubleshooting
print("===== Database Configuration Debug Information =====")
print(f"BASE_DIR: {BASE_DIR}")
print(f"dj_database_url imported: {DATABASE_URL_AVAILABLE}")

# Try to use DATABASE_URL if available
if DATABASE_URL_AVAILABLE:
    try:
        database_url = os.environ.get('DATABASE_URL', '')
        # Print full database URL for debugging (mask credentials)
        if database_url:
            # Only show first few characters to protect sensitive information
            masked_url = database_url[:10] + '...' if len(database_url) > 10 else database_url
            print(f"Raw DATABASE_URL value received: {masked_url}")
            
            # Check for common database URL formats
            valid_prefixes = ('postgres://', 'postgresql://', 'mysql://', 'sqlite://', 'oracle://')
            if any(database_url.startswith(prefix) for prefix in valid_prefixes):
                print(f"Using database URL: {database_url[:10]}...")
                DATABASES['default'] = dj_database_url.parse(database_url)
                print(f"Database engine set to: {DATABASES['default'].get('ENGINE', 'unknown')}")
            else:
                print(f"DATABASE_URL format invalid. Expected formats like: postgresql://user:pass@host:port/dbname")
                print("Using SQLite database instead.")
        else:
            print("DATABASE_URL not set. Using SQLite database.")
    except Exception as e:
        print(f"Error setting up database: {e}")
        print("Falling back to SQLite database.")
else:
    print("dj_database_url package not available. Using SQLite database.")

print("===============================================")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
import os
from pathlib import Path

STATIC_URL = '/static/'

# This ensures Django looks for static files in the 'static' directory inside the project
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# For production, set STATIC_ROOT and collect static files
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Configure WhiteNoise for serving static files
if not DEBUG:
    # Enhanced compression and caching for production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    # Enable ManifestStaticFilesStorage with some exceptions to prevent hashing of filenames
    WHITENOISE_MIMETYPES = {
        'image/png': 'image/png',  # Don't compress PNG files
        'image/jpeg': 'image/jpeg',  # Don't compress JPEG files
        'image/gif': 'image/gif',  # Don't compress GIF files
        'video/mp4': 'video/mp4',  # Don't compress MP4 files
    }
else:
    # Simple storage for development
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Make sure the static directories exist
os.makedirs(os.path.join(BASE_DIR, "staticfiles"), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, "static"), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, "static", "css"), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, "static", "js"), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, "static", "images"), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, "static", "LOGOS"), exist_ok=True)

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# Media files (Uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Razorpay Settings
RAZORPAY_KEY_ID = os.environ.get('RAZORPAY_KEY_ID', '')
RAZORPAY_KEY_SECRET = os.environ.get('RAZORPAY_KEY_SECRET', '')

# NewsAPI Settings
NEWSAPI_KEY = os.environ.get('NEWSAPI_KEY', '')
